{"name":"CloudPlugin","tagline":"Cloud Services Plugin for ImageJ - Gsoc 2015","body":"# Developers\r\nStudent: [Doru-Cristian Gucea](gucea.doru@gmail.com)     \r\nMentor1: [Dimiter Prodanov](dimiterpp@gmail.com)    \r\nMentor2: [Visakh Muraleedharan](visakh@incf.org)   \r\n  \r\n# Organization: \r\n[International Neuroinformatics Coordinating Facility](http://incf.org)   \r\n\r\n# Project description\r\nImageJ is a public domain Java image processing program designed with an open architecture that provides extensibility via Java plugins. The aim of this project is to develop an ImageJ plugin which can be used to download/upload datasets from/to iRODS (Integrated Rule-Oriented Data System), an open source data management software used by the research community in order to take control of their data, regardless of where and on what device the data is stored\r\n\r\n### Re-factoring\r\n\r\nMy project is forked from Atin's repository: https://github.com/Atin007/dbclient, which is a GSoc 2014 project. Atin's project implements an ImageJ plugin for Dropbox, so I thought that it would be appropriate to integrate my new iRODS functionality as another cloud service.   \r\nA lot of re-factoring was done to the old project in order to make it clear and easier to support for future developers. The problems with the coding style from the Gsoc 2014's project was that (quote from the project proposal belonging to Desmond, Joshua A.): \r\n> The current project is nothing short of a mess, with a thorough lack of documentation, an\r\n> absence of automated JUnit tests, and a strong disregard for object oriented design principles. The\r\n> program admittedly works as it should, but from a software design perspective, it is unusable. In one\r\n> of the two classes within the entire program, for example, there is a method called “run” that is over\r\n> 1000 lines long, (or, according to a SLOC counter, about 550 lines without comments). The method\r\n> “run” encapsulates building the GUI and its every component, defining all action listeners in their\r\n> entirety with anonymous class definitions, managing multiple threads, handling data validation from\r\n> Dropbox, making numerous calls to Swing, Dropbox, AWT, and ImageJ libraries, building and\r\n> representing the file tree from Dropbox, determining the operating system of the user, and probably\r\n> If anyone ever wants to build off or further develop MyCloudJ, refactoring is a must. No\r\n> further work could possibly get around that.\r\nBefore starting to implement the functionality for iRODS, a lot of refactoring work was done. This work also continued while adding iRODS features. I will present the re-factoring challenges in this separate chapter, trying to isolate the presentation of the functionality from the presentation of the re-factoring. Stay tunned!\r\n\r\n### Week 1 \r\nDeliverable: Plugin with a simple GUI, asking for iRODS credentials. The plugin can create a session with the iRODS server and display a successful/not successful connection message.  \r\n\r\n[iRODS Login Screen](https://drive.google.com/file/d/0B5SBH08PU_CheGJ4aFhxT09sblk/view?usp=sharing)\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}